--- conv.cc
+++ conv.cc
@@ -1,4 +1,4 @@
-/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.
+/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
 limitations under the License.
 ==============================================================================*/
 
-#include "tensorflow/lite/micro/tflite-micro/tensorflow/lite/micro/kernels/conv.h"
+#include "tensorflow/lite/micro/kernels/conv.h"
 
 #include "tensorflow/lite/c/builtin_op_data.h"
 #include "tensorflow/lite/c/common.h"
@@ -24,226 +24,94 @@
 #include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
 #include "tensorflow/lite/kernels/kernel_util.h"
 #include "tensorflow/lite/kernels/padding.h"
-#include "tensorflow/lite/micro/tflite-micro/tensorflow/lite/micro/kernels/kernel_util.h"
+#include "tensorflow/lite/micro/kernels/kernel_util.h"
+#include "tensorflow/lite/micro/kernels/xtensa/fixedpoint_utils.h"
+#include "tensorflow/lite/micro/kernels/xtensa/xtensa.h"
+#include "tensorflow/lite/micro/kernels/xtensa/xtensa_conv.h"
 
 namespace tflite {
-const int kConvInputTensor = 0;
-const int kConvWeightsTensor = 1;
-const int kConvBiasTensor = 2;
-const int kConvOutputTensor = 0;
-
-// Conv is quantized along dimension 0:
-// https://www.tensorflow.org/lite/performance/quantization_spec
-const int kConvQuantizedDimension = 0;
-
-// Returns a ConvParams struct with all the parameters needed for a
-// float computation.
-ConvParams ConvParamsFloat(const TfLiteConvParams& params,
-                           const OpDataConv& data) {
-  ConvParams op_params;
-  CalculateActivationRange(params.activation, &op_params.float_activation_min,
-                           &op_params.float_activation_max);
-  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
-  op_params.padding_values.width = data.padding.width;
-  op_params.padding_values.height = data.padding.height;
-  op_params.stride_width = params.stride_width;
-  op_params.stride_height = params.stride_height;
-  op_params.dilation_width_factor = params.dilation_width_factor;
-  op_params.dilation_height_factor = params.dilation_height_factor;
-  return op_params;
-}
-ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
-                               const OpDataConv& data) {
-  ConvParams op_params;
-  op_params.input_offset = -data.input_zero_point;
-  op_params.weights_offset = -data.filter_zero_point;
-  op_params.output_offset = data.output_zero_point;
-  op_params.output_multiplier = data.output_multiplier;
-  op_params.output_shift = -data.output_shift;
-  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
-  op_params.padding_values.height = data.padding.height;
-  op_params.padding_values.width = data.padding.width;
-  op_params.stride_height = params.stride_height;
-  op_params.stride_width = params.stride_width;
-  op_params.dilation_height_factor = params.dilation_height_factor;
-  op_params.dilation_width_factor = params.dilation_width_factor;
-  op_params.quantized_activation_min = data.output_activation_min;
-  op_params.quantized_activation_max = data.output_activation_max;
-  return op_params;
-}
-TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
-                                 const TfLiteConvParams& params, int width,
-                                 int height, int filter_width,
-                                 int filter_height, int out_width,
-                                 int out_height, const TfLiteType data_type,
-                                 OpDataConv* data) {
-  bool has_bias = node->inputs->size == 3;
-  // Check number of inputs/outputs
-  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
-  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
-
-  // Matching GetWindowedOutputSize in TensorFlow.
-  auto padding = params.padding;
-  data->padding = ComputePaddingHeightWidth(
-      params.stride_height, params.stride_width, params.dilation_height_factor,
-      params.dilation_width_factor, height, width, filter_height, filter_width,
-      padding, &out_height, &out_width);
-
-  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
-  TF_LITE_ENSURE(context, input != nullptr);
-  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
-  TF_LITE_ENSURE(context, filter != nullptr);
-  const TfLiteTensor* bias =
-      GetOptionalInputTensor(context, node, kConvBiasTensor);
-  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
-  TF_LITE_ENSURE(context, output != nullptr);
-
-  // Note that quantized inference requires that all tensors have their
-  // parameters set. This is usually done during quantized training.
-  if (data_type != kTfLiteFloat32) {
-    int output_channels = filter->dims->data[kConvQuantizedDimension];
-
-    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
-        context, input, filter, bias, output, params.activation,
-        &data->output_multiplier, &data->output_shift,
-        &data->output_activation_min, &data->output_activation_max,
-        data->per_channel_output_multiplier, data->per_channel_output_shift,
-        output_channels));
-  }
-
-  data->input_zero_point = input->params.zero_point;
-  data->filter_zero_point = filter->params.zero_point;
-  data->output_zero_point = output->params.zero_point;
-
-  return kTfLiteOk;
-}
-TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
-  TFLITE_DCHECK(node->user_data != nullptr);
-  TFLITE_DCHECK(node->builtin_data != nullptr);
-
-  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
-  const auto& params =
-      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
-
-  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
-  TF_LITE_ENSURE(context, output != nullptr);
-  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
-  TF_LITE_ENSURE(context, input != nullptr);
-  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
-  TF_LITE_ENSURE(context, filter != nullptr);
-
-  const int input_width = input->dims->data[2];
-  const int input_height = input->dims->data[1];
-  const int filter_width = filter->dims->data[2];
-  const int filter_height = filter->dims->data[1];
-  const int output_width = output->dims->data[2];
-  const int output_height = output->dims->data[1];
-
-  // Dynamically allocate per-channel quantization parameters.
-  const int num_channels = filter->dims->data[kConvQuantizedDimension];
-  data->per_channel_output_multiplier =
-      static_cast<int32_t*>(context->AllocatePersistentBuffer(
-          context, num_channels * sizeof(int32_t)));
-  data->per_channel_output_shift =
-      static_cast<int32_t*>(context->AllocatePersistentBuffer(
-          context, num_channels * sizeof(int32_t)));
-
-  // All per-channel quantized tensors need valid zero point and scale arrays.
-  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
-    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
-                      kTfLiteAffineQuantization);
-
-    const auto* affine_quantization =
-        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
-    TFLITE_DCHECK(affine_quantization != nullptr);
-    TFLITE_DCHECK(affine_quantization->scale != nullptr);
-    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
-
-    TF_LITE_ENSURE(context,
-                   affine_quantization->scale->size == 1 ||
-                       affine_quantization->scale->size ==
-                           filter->dims->data[kConvQuantizedDimension]);
-    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
-                      affine_quantization->zero_point->size);
-  }
-
-  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
-      context, node, params, input_width, input_height, filter_width,
-      filter_height, output_width, output_height, input->type, data));
-
-  return kTfLiteOk;
-}
-
 namespace {
 
 void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
-  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
+  return context->AllocatePersistentBuffer(context, sizeof(XtensaConvOpData));
+}
+
+TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
+  TF_LITE_ENSURE_OK(context, ConvPrepare(context, node));
+
+#if defined(HIFI4) || defined(HIFI5)
+  TF_LITE_ENSURE_OK(context, ConvPrepareHifi(context, node));
+#endif
+  return kTfLiteOk;
 }
 
 TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
+  TFLITE_DCHECK(node->user_data != nullptr);
+  TFLITE_DCHECK(node->builtin_data != nullptr);
+
   const TfLiteEvalTensor* input =
       tflite::micro::GetEvalInput(context, node, kConvInputTensor);
+
+#if defined(HIFIMINI) || defined(HIFI4) || defined(HIFI5)
+  const auto& params =
+      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
+  const auto& op_data = *(reinterpret_cast<XtensaConvOpData*>(node->user_data));
+
+  TfLiteEvalTensor* output =
+      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
   const TfLiteEvalTensor* filter =
       tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
   const TfLiteEvalTensor* bias =
       (NumInputs(node) == 3)
           ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
           : nullptr;
-  TfLiteEvalTensor* output =
-      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
+#endif
 
-  TFLITE_DCHECK(node->builtin_data != nullptr);
-  const auto& params =
-      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
-  TFLITE_DCHECK(node->user_data != nullptr);
-  const auto& data = *(static_cast<const OpDataConv*>(node->user_data));
+#if defined(HIFIMINI)
+  int* input_dims = input->dims->data;
+  int* filter_dims = filter->dims->data;
+  if (input_dims[0] == 1 && input_dims[1] == 1 && input_dims[2] == 1 &&
+      input_dims[3] == 32 && filter_dims[0] == 32 && filter_dims[1] == 1 &&
+      filter_dims[2] == 1 && filter_dims[3] == 32) {
+    Conv1x32Input32x32FilterHifiMini(
+        -op_data.reference_op_data.input_zero_point,
+        op_data.reference_op_data.output_zero_point,
+        op_data.reference_op_data.output_activation_min,
+        op_data.reference_op_data.output_activation_max,
+        op_data.reference_op_data.per_channel_output_multiplier,
+        op_data.reference_op_data.per_channel_output_shift,
+        tflite::micro::GetTensorShape(input),
+        tflite::micro::GetTensorData<int8_t>(input),
+        tflite::micro::GetTensorShape(filter),
+        tflite::micro::GetTensorData<int8_t>(filter),
+        tflite::micro::GetTensorShape(bias),
+        tflite::micro::GetTensorData<int32_t>(bias),
+        tflite::micro::GetTensorShape(output),
+        tflite::micro::GetTensorData<int8_t>(output));
+    return kTfLiteOk;
+  }
+#endif  // defined(HIFIMINI)
 
-  TF_LITE_ENSURE_EQ(context, input->type, output->type);
-  TF_LITE_ENSURE_MSG(
-      context,
-      input->type == filter->type ||
-          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8),
-      "Hybrid models are not supported on TFLite Micro.");
-
-  switch (input->type) {  // Already know in/out types are same.
-    case kTfLiteFloat32: {
-      tflite::reference_ops::Conv(
-          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
-          tflite::micro::GetTensorData<float>(input),
-          tflite::micro::GetTensorShape(filter),
-          tflite::micro::GetTensorData<float>(filter),
-          tflite::micro::GetTensorShape(bias),
-          tflite::micro::GetTensorData<float>(bias),
-          tflite::micro::GetTensorShape(output),
-          tflite::micro::GetTensorData<float>(output),
-          tflite::micro::GetTensorShape(nullptr), nullptr);
-      break;
-    }
-    case kTfLiteInt16: {
-      reference_integer_ops::ConvPerChannel(
-          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
-          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
-          tflite::micro::GetTensorData<int16_t>(input),
-          tflite::micro::GetTensorShape(filter),
-          tflite::micro::GetTensorData<int8_t>(filter),
-          tflite::micro::GetTensorShape(bias),
-          tflite::micro::GetTensorData<std::int64_t>(bias),
-          tflite::micro::GetTensorShape(output),
-          tflite::micro::GetTensorData<int16_t>(output));
-      break;
-    }
+  switch (input->type) {
     case kTfLiteInt8: {
-      reference_integer_ops::ConvPerChannel(
-          context, ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
-          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
-          tflite::micro::GetTensorData<int8_t>(input),
-          tflite::micro::GetTensorShape(filter),
-          tflite::micro::GetTensorData<int8_t>(filter),
-          tflite::micro::GetTensorShape(bias),
-          tflite::micro::GetTensorData<int32_t>(bias),
-          tflite::micro::GetTensorShape(output),
-          tflite::micro::GetTensorData<int8_t>(output));
+#if defined(HIFIMINI)
+      ConvEvalHifiMini(ConvParamsQuantized(params, op_data.reference_op_data),
+                       op_data.reference_op_data.per_channel_output_multiplier,
+                       op_data.reference_op_data.per_channel_output_shift,
+                       tflite::micro::GetTensorShape(input),
+                       tflite::micro::GetTensorData<int8_t>(input),
+                       tflite::micro::GetTensorShape(filter),
+                       tflite::micro::GetTensorData<int8_t>(filter),
+                       tflite::micro::GetTensorShape(bias),
+                       tflite::micro::GetTensorData<int32_t>(bias),
+                       tflite::micro::GetTensorShape(output),
+                       tflite::micro::GetTensorData<int8_t>(output));
+#elif defined(HIFI4) || defined(HIFI5)
+      ConvEvalHifi(context, node, params, op_data, input, filter, bias, output);
+#else
+      return ConvReferenceEvalInt8(context, node);
+#endif
       break;
     }
     default:
@@ -253,13 +121,12 @@
   }
   return kTfLiteOk;
 }
-
 }  // namespace
 
 TfLiteRegistration Register_CONV_2D() {
   return {/*init=*/Init,
           /*free=*/nullptr,
-          /*prepare=*/ConvPrepare,
+          /*prepare=*/Prepare,
           /*invoke=*/Eval,
           /*profiling_string=*/nullptr,
           /*builtin_code=*/0,
