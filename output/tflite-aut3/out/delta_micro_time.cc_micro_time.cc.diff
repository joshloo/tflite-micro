--- micro_time.cc
+++ micro_time.cc
@@ -1,4 +1,4 @@
-/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
+/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,48 +12,10 @@
 See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
-
-// Reference implementation of timer functions.  Platforms are not required to
-// implement these timer methods, but they are required to enable profiling.
-
-// On platforms that have a POSIX stack or C library, it can be written using
-// methods from <sys/time.h> or clock() from <time.h>.
-
-// To add an equivalent function for your own platform, create your own
-// implementation file, and place it in a subfolder with named after the OS
-// you're targeting. For example, see the Cortex M bare metal version in
-// tensorflow/lite/micro/bluepill/micro_time.cc or the mbed one on
-// tensorflow/lite/micro/mbed/micro_time.cc.
-
-#include "tensorflow/lite/micro/tflite-micro/tensorflow/lite/micro/micro_time.h"
-
-#if defined(TF_LITE_USE_CTIME)
-#include <ctime>
-#endif
-
-namespace tflite {
-
-#if !defined(TF_LITE_USE_CTIME)
-
-// Reference implementation of the ticks_per_second() function that's required
-// for a platform to support Tensorflow Lite for Microcontrollers profiling.
-// This returns 0 by default because timing is an optional feature that builds
-// without errors on platforms that do not need it.
-int32_t ticks_per_second() { return 0; }
-
-// Reference implementation of the GetCurrentTimeTicks() function that's
-// required for a platform to support Tensorflow Lite for Microcontrollers
-// profiling. This returns 0 by default because timing is an optional feature
-// that builds without errors on platforms that do not need it.
-int32_t GetCurrentTimeTicks() { return 0; }
-
-#else  // defined(TF_LITE_USE_CTIME)
-
-// For platforms that support ctime, we implment the micro_time interface in
-// this central location.
-int32_t ticks_per_second() { return CLOCKS_PER_SEC; }
-
-int32_t GetCurrentTimeTicks() { return clock(); }
-#endif
-
-}  // namespace tflite
+// This file is empty to ensure that a specialized implementation of
+// micro_time.h is used (instead of the default implementation from
+// tensorflow/lite/micro/micro_time.cc).
+//
+// The actual target-specific implementation of micro_time.h is in
+// system_setup.cc since that allows us to consolidate all the target-specific
+// specializations into one source file.
