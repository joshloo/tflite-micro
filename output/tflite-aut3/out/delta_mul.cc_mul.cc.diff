--- mul.cc
+++ mul.cc
@@ -15,14 +15,14 @@
 
 #include "tensorflow/lite/kernels/internal/reference/mul.h"
 
-#include "tensorflow/lite/c/common.h"
+#include "CMSIS/NN/Include/arm_nnfunctions.h"
 #include "tensorflow/lite/kernels/internal/quantization_util.h"
 #include "tensorflow/lite/kernels/internal/reference/integer_ops/mul.h"
 #include "tensorflow/lite/kernels/internal/reference/process_broadcast_shapes.h"
 #include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
 #include "tensorflow/lite/kernels/kernel_util.h"
-#include "tensorflow/lite/micro/tflite-micro/tensorflow/lite/micro/kernels/kernel_util.h"
-#include "tensorflow/lite/micro/tflite-micro/tensorflow/lite/micro/memory_helpers.h"
+#include "tensorflow/lite/micro/kernels/kernel_util.h"
+#include "tensorflow/lite/micro/memory_helpers.h"
 
 namespace tflite {
 namespace ops {
@@ -35,14 +35,16 @@
 constexpr int kOutputTensor = 0;
 
 struct OpData {
+  int32_t output_activation_min;
+  int32_t output_activation_max;
+
+  int32_t output_multiplier;
+  int output_shift;
+
+  // Cached tensor zero point values for quantized operations.
   int32_t input1_zero_point;
   int32_t input2_zero_point;
-
-  int32_t output_activation_min;
-  int32_t output_activation_max;
   int32_t output_zero_point;
-  int32_t output_multiplier;
-  int output_shift;
 
   float output_activation_min_f32;
   float output_activation_max_f32;
@@ -113,12 +115,16 @@
         tflite::micro::GetTensorShape(output),
         tflite::micro::GetTensorData<int8_t>(output));
   } else {
-    reference_integer_ops::Mul(op_params, tflite::micro::GetTensorShape(input1),
-                               tflite::micro::GetTensorData<int8_t>(input1),
-                               tflite::micro::GetTensorShape(input2),
-                               tflite::micro::GetTensorData<int8_t>(input2),
-                               tflite::micro::GetTensorShape(output),
-                               tflite::micro::GetTensorData<int8_t>(output));
+    arm_elementwise_mul_s8(
+        tflite::micro::GetTensorData<int8_t>(input1),
+        tflite::micro::GetTensorData<int8_t>(input2), op_params.input1_offset,
+        op_params.input2_offset, tflite::micro::GetTensorData<int8_t>(output),
+        op_params.output_offset, op_params.output_multiplier,
+        op_params.output_shift, op_params.quantized_activation_min,
+        op_params.quantized_activation_max,
+        MatchingElementsSize(tflite::micro::GetTensorShape(input1),
+                             tflite::micro::GetTensorShape(input2),
+                             tflite::micro::GetTensorShape(output)));
   }
 }
 
@@ -199,9 +205,9 @@
 }  // namespace mul
 
 TfLiteRegistration Register_MUL() {
-  return {/*init=*/mul::Init,
-          /*free=*/nullptr,
-          /*prepare=*/mul::Prepare,
+  return {/* Init=*/mul::Init,
+          /* Free=*/nullptr,
+          /* Prepare=*/mul::Prepare,
           /*invoke=*/mul::Eval,
           /*profiling_string=*/nullptr,
           /*builtin_code=*/0,
